version: "3.8"

networks:
  web-network:
    driver: 'bridge'

services:
  nginx:
    build:
      args:
        - NGINX_VERSION=$NGINX_VERSION
        - http_proxy
        - https_proxy
        - no_proxy
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    restart: on-failure
    depends_on:
      - php-fpm
    networks:
      - web-network
    container_name: ${PROJECT_NAME}-nginx

  php-fpm:
    build:
      args:
        PHP_VERSION: $PHP_VERSION
        PHPREDIS_VERSION: $PHPREDIS_VERSION
        APP_ENV: $APP_ENV
        XDEBUG_VERSION: $XDEBUG_VERSION
      context: .
      dockerfile: ./docker/php-fpm/Dockerfile
      target: ${APP_ENV}
    environment:
      - COMPOSER_MEMORY_LIMIT=-1
    restart: on-failure
    command: sh -c 'composer install --no-interaction --optimize-autoloader && php-fpm'
    networks:
      - web-network
    container_name: ${PROJECT_NAME}-php

#  php-fpm:
#    image: docker.pkg.github.com/stryberventures/stryberphpdockerimages/php-8.0-with-mongodb-and-elk:dev
#    environment:
#      - COMPOSER_MEMORY_LIMIT=-1
#    restart: on-failure
#    command: sh -c 'php-fpm'
#    depends_on:
#      - postgres
#    networks:
#      - web-network
#    container_name: ${PROJECT_NAME}-php
#    working_dir: /laravel

  postgres:
    build:
      args:
        $POSTGRES_VERSION: $POSTGRES_VERSION
      context: .
      dockerfile: ./docker/postgres/Dockerfile
    restart: on-failure
    environment:
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - web-network
    container_name: ${PROJECT_NAME}-postgres

  mongodb:
    container_name: ${PROJECT_NAME}-mongodb
    image: mongo:4.0
    environment:
      - MONGO_INITDB_DATABASE=$MONGO_DB_DATABASE
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_DB_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_DB_PASSWORD

  elasticsearch:
    container_name: ${PROJECT_NAME}-elasticsearch
    build:
      context: ./docker/elk/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - web-network

  kibana:
    container_name: ${PROJECT_NAME}-kibana
    build:
      context: ./docker/elk/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    networks:
      - web-network
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch

  redis:
    image: "redis:${REDIS_IMAGE_VERSION}"
    command: |
      bash -c "redis-server"
    networks:
      - web-network
    container_name: ${PROJECT_NAME}-redis

  redis-webui:
    build:
      context: ./docker/redis-webui
    environment:
      - ADMIN_USER=$REDIS_WEBUI_USERNAME
      - ADMIN_PASS=$REDIS_WEBUI_PASSWORD
      - REDIS_1_HOST=$REDIS_WEBUI_CONNECT_HOST
      - REDIS_1_PORT=$REDIS_WEBUI_CONNECT_PORT
    networks:
      - web-network
    depends_on:
      - redis

  maildev:
    build: ./docker/maildev
    networks:
      - web-network
